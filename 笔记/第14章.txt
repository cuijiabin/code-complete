第14章 组织直线型代码

14.1 必须有明确顺序的语句
14.2 顺序无关的语句
	使代码易于自上而下的阅读
	把相关的语句组织在一起


14.1 必须有明确顺序的语句
针对接口编程而不是针对实现编程，则要求接口没有假定，或者假定很明显。

1、设法组织代码，使依赖关系变得明显。
2、使子程序名称能够明显的表示依赖关系。
3、利用子程序参数明确表示依赖关系。
4、用注释对不清晰的依赖关系进行说明。
5、用断言或错误处理代码来检查依赖关系。


14.1 顺序无关的语句
如果语句间没有依赖关系，则可以根据第二标准来来判断语句或代码块的顺序：就近原则（Principle of proximity）。

1、使代码易于自上而下的阅读。
2、把相关的语句组织在一起。如果相关语句的管理性很强则要考虑形成一个新的子程序。


CHECKLIST: Organizing Straight-line Code
核对表：组织直线型代码

1、代码使得语句间的依赖关系变得明显吗？

2、子程序的名字使得依赖关系变得明显吗？

3、子程序的参数使得依赖关系变得明显吗？

4、如果依赖关系不明确，是否用注释加以说明？

5、你用内务管理变量来检查代码中关键位置的顺序依赖关系了吗？

6、代码容易按照自上而下的顺序阅读吗？

7、相关的语句被组织在一起吗？

8、把相对独立的语句放到各自的子程序里了吗？

 

本章要点

1、组织直线型代码最主要的原则是按照依赖关系进行排列。

2、可以用好的子程序名，参数列表，注释以及——如果代码足够重要——内务变量（类内部的状态变量）来使依赖关系变得更加明显。

3、如果代码之间没有依赖关系，那就设法使相关的语句尽可能的接近。
