第10章 使用变量的一般事项

0.1 数据认知
	数据认知测试
	有关数据类型的其他资源
10.2 轻松掌握变量定义
	隐式声明
10.3 变量初始化原则
10.4 作用域
	使变量引用局部化
	尽可能缩短变量的“存活”时间
	减小作用域的一般原则
	有关缩小变量作用域的说明
10.5 持续性
10.6 绑定时间
10.7 数据类型和控制结构之间的关系
10.8 为变量指定单一用途


10.1 作用域

尽可能减小作用域 如果能将变量的作用域限制在一个子程序之内的话，那是再好不过的了
把对某一变量的引用集中放置

10.2 持久性

“持久性”指的是某一数据的使用寿命
在程序中加入调试代码来检查变量的值是否合理
在写代码时假定变量已经失效
养成在恰好使用某一变量之前对其进行初始化的习惯

10.3 赋值时间

应该尽可能地晚一些将它们联系在一起。通常，越是晚一些给变量赋值，代码的灵活性便越大

10.4 数据结构与控制结构的关系

程序中顺序性数据可以转化为顺序性语句
程序中的选择性数据可以转换为 if和 case语句
程序中的重复性数据可以转化为 for、repeat 和while循环结构

10.5 变量功能单一性

应使每一个变量只具有一个功能
避免使用具有隐含意义的变量
保证所有说明的变量

10.6 全局变量

即使使用全局变量是没有危险的，使用它也决非最好的编程方法

10.6.1 伴随全局变量的常见问题

对全局数据的疏忽改变
伴随全局变量的奇怪的别名问题
有全局数据的代码重入问题
全局数据妨碍重新使用的代码。
全局变量会损害模块性和可管理性

10.6.2 使用全局数据的理由

保存全局数值，有时候需要在整个程序中都要用到某些数据
代替命名常量
方便常用数据的使用
消除“穿梭”数据。

10.6.3 怎样降低使用全局数据的危险

先使所有变量都成为局部的，然后再根据需要把其中某一些改为全局变量
区分全局和模块变量
建立使你一眼即可识别出全局变量的命名约定
建立一个清楚标出所有全局变量的注释表
使用加锁技术来控制对全局变量的存取
加锁技术在开发阶段是有用的
不要通过把数据放人庞大的变量，同时又到处传递它来掩盖你使用了全局变量的事实

10.6.4 用存取子程序来代替全局数据

用全局数据能作的一切，都可以通过使用存取子程序来做得更好，存取子程序是建立在抽象数据类型和信息隐蔽的基础上的

存取子程序的优点:
可以对数据进行集中控制
可以把所有对数据的引用分隔开来
你可以自动获得信息隐蔽带来的好处
存取子程序很容易转换为抽象数据类型

怎样使用存取子程序:
要求所有子程序来对数据进行存取操作
不要把所有的全局数据都放入同一个模块中
在存取子程序中建立某种程度的抽象
把对数据的所有存取保持在同一抽象水平上