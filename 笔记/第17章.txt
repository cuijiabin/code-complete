第17章 不常见的控制结构

17.1 子程序中的多个返回
17.2 递归
	递归的例子
	使用递归的技巧
17.3 goto
	反对goto的论点
	支持goto的观点
	关于goto的虚假辩论
	错误处理和goto
	goto和在else子句中的共享代码
	goto使用原则总结
17.4 对不常见控制结构的看法
	其他资源


前言

谨慎的使用这些控制结构，将会获得更多的帮助。

17.1 子程序中有多处返回

1、如果能够增强可读性，那么就是用 return 。
2、用防卫子句来简化复杂的错误处理。
3、减少子程序中 return 的数量。

 
17.2 递归
使用递归的技巧：

1、确认递归能够停止。
2、使用安全计数器防止出现无穷递归。
3、把递归限制在一个子程序中。
4、留心栈空间。
5、不要用递归计算阶乘和斐波那契数列。

17.2 goto
CHECKLIST: Unusual Control Structures
核对表：不常见的控制结构
Return
1、每一个子程序都仅在必要的时候才使用 return 吗？
2、使用 return 有助于增强可读性吗？

递归

1、递归子程序包含了停止递归的代码了吗？
2、子程序使用安全计数器来确保该子程序能够挺下来吗？
3、递归只位于一个子程序中吗？
4、子程序的递归深度处于程序栈容量可以满足的限度吗？
5、递归是实现子程序的最佳方法吗？

Goto

本章要点
多个 return 可以提高子程序的可读性，同时避免产生很深的嵌套逻辑。