第30章 编程工具

30.1 设计工具
30.2 源代码工具
	编辑
	分析代码质量
	重构源代码
	Version Control
	数据词典
30.3 可执行码工具
	产生目标码
	除错
	测试
	代码微调
30.4 工具导向的环境
30.5 打造你自己的编程工具
	项目特有的工具
	脚本
30.6 工具幻境
	额外资源


设计工具
	UML
源代码工具
	IDE
		好处
			编辑的时候能检测出编译错误
			集成源代码控制、构建、测试和调试工具
			能查看整个项目的轮廓
			跳转到指定的类、方法或变量
			跳转到使用某个类、方法、变量的地方
			支持
			语言格式
			交互的编辑方式，有助于提高效率
			括号匹配
			通用语言模板
			智能缩进
			重构工具
			可以运行/录制宏
			查找时自动显示常用词语
			正则查找/替换
			可以同时编辑多个文件
			左右两边的可视化diff工具
			多级撤销

	多个文件查找、替换：grep sed perl awk
	diff工具
	合并工具
	代码格式化工具
	接口文档工具：javadoc
	模板
	类层级结构图
		分析代码质量

	语法/语义检查：lint
	度量工具（复杂度、行数统计等）
	重构工具
	restructure工具：将goto转换成while等
	语言转换
	版本控制
		源代码控制
		依赖项控制
		项目文档版本管理
		项目管理工具

	数据字典
		数据字典就是整个项目中所有的符号（变量名、常量名、类名、包名、方法名、函数名等），以及它们的含义
		防止名称重复
		防止含义相同的符号名称不同

	可执行代码工具
		代码生成工具
		编译器
		链接器
		构建工具：make ant
			重新编译的条件：文件本身发生变化或它的依赖项发生变化。这就是构建工具的作用

	代码库
		可以花钱购买或免费下载
			容器类
			电子商务服务
			跨平台工具
			数据压缩工具
			数据结构和算法
			数据库操作，数据文件操作
			绘图工具、图标工具
			图像处理工具
			许可证管理工具
			数学操作工具
			网络通信个工具
			安全加密工具
			表格和矩阵工具
			文本和拼写工具
			声音、电话、传真工具

	代码生成向导
		面向数据库的程序
		可以用来制作原型
		缺点就是生成的代码几乎不能看

	安装包制作工具
	预处理工具：m4
	调试工具
		编译器警告信息
		测试“脚手架”
		diff工具（比较源代码）
		性能分析工具
		Trace监视工具
		交互式调试——硬件和软件两个方面
		
	测试
		自动化测试框架：JUnit, NUnit, CppUnit等
		自动化测试生成工具
		测试用例录制和回放工具
		覆盖率工具
		符号调试工具
		diff工具（比较程序输出）
		“脚手架”
		缺陷注入工具
		缺陷跟踪工具

	性能分析工具
	汇编/反汇编工具
	面向工具的环境
		UNIX：grep diff sort make crypt tar lint ctags sed awk vi

	自己开发工具
		项目相关的工具
		脚本：用于日常的一些操作，比如备份工程等

编程永远不会消失，工具永远不能代替编程